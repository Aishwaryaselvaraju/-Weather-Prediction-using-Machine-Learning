import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score



df = pd.read_csv('weather_data.csv')
print(df.head())
df = df.dropna()

X = df.drop('Temperature', axis=1)  # Features (assuming 'Temperature' is the target)
y = df['Temperature']  # Target variable (Temperature)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

lr_model = LinearRegression()
lr_model.fit(X_train_scaled, y_train)
y_pred_lr = lr_model.predict(X_test_scaled)

lr_rmse = np.sqrt(mean_squared_error(y_test, y_pred_lr))
lr_r2 = r2_score(y_test, y_pred_lr)
print(f"Linear Regression - RMSE: {lr_rmse}, R2 Score: {lr_r2}")

dt_model = DecisionTreeRegressor(random_state=42)
dt_model.fit(X_train, y_train)
y_pred_dt = dt_model.predict(X_test)

dt_rmse = np.sqrt(mean_squared_error(y_test, y_pred_dt))
dt_r2 = r2_score(y_test, y_pred_dt)
print(f"Decision Tree - RMSE: {dt_rmse}, R2 Score: {dt_r2}")

rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

rf_rmse = np.sqrt(mean_squared_error(y_test, y_pred_rf))
rf_r2 = r2_score(y_test, y_pred_rf)
print(f"Random Forest - RMSE: {rf_rmse}, R2 Score: {rf_r2}")

plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label='True Values', color='blue', alpha=0.6)
plt.plot(y_pred_lr, label='Linear Regression Predictions', color='red', linestyle='--')
plt.plot(y_pred_dt, label='Decision Tree Predictions', color='green', linestyle='--')
plt.plot(y_pred_rf, label='Random Forest Predictions', color='orange', linestyle='--')
plt.legend()
plt.title("Model Comparison: Weather Prediction")
plt.xlabel("Test Samples")
plt.ylabel("Temperature (Â°C)")
plt.show()
